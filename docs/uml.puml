@startuml

' Style du diagramme optimisé
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
}
skinparam interface {
    BackgroundColor LightYellow
}
skinparam abstract {
    BackgroundColor LightGray
}

' ===== INTERFACES (Contrats) =====
interface IRepository<T> {
    +create(T entity): T
    +findById(int id): T
    +findAll(): List<T>
    +update(T entity): T
    +delete(int id): boolean
}

interface INotificationService {
    +envoyerNotification(Membre destinataire, String message): void
    +marquerCommelue(int notificationId): void
    +obtenirNotificationsNonLues(int membreId): List<Notification>
}

interface IStatisticsService {
    +calculerStatistiques(): Statistiques
    +obtenirRevenuMensuel(): double
    +obtenirNombreMembresActifs(): int
}

interface IReservationService {
    +reserverCours(int membreId, int coursId): boolean
    +annulerReservation(int participationId): boolean
    +obtenirReservations(int membreId): List<Participation>
}

' ===== CLASSES ABSTRAITES =====
abstract class Personne {
    #id: int
    #nom: String
    #prenom: String
    #email: String
    #telephone: String
    +{abstract} getType(): String
    +getNomComplet(): String
    +validerEmail(): boolean
}

abstract class Equipement {
    #id: int
    #nom: String
    #description: String
    #etat: EtatEquipement
    #prix: double
    #dateAchat: LocalDate
    +{abstract} calculerCoutMaintenance(): double
    +changerEtat(EtatEquipement nouvelEtat): void
}

' ===== ENUMERATIONS =====
enum EtatEquipement {
    NEUF
    BON_ETAT
    USURE_NORMALE
    A_REPARER
    HORS_SERVICE
}

enum TypeAbonnement {
    MENSUEL
    TRIMESTRIEL
    ANNUEL
    ETUDIANT
}

enum TypeNotification {
    RESERVATION_CONFIRMEE
    COURS_ANNULE
    ABONNEMENT_EXPIRE
    MAINTENANCE_EQUIPEMENT
}

' ===== CLASSES MÉTIER =====
class Membre {
    -dateInscription: LocalDate
    -typeAbonnement: TypeAbonnement
    -actif: boolean
    -abonnementActuel: Abonnement
    +getType(): String
    +estAbonnementValide(): boolean
    +renouvelerAbonnement(): void
}

class Entraineur {
    -specialite: String
    -certifications: List<String>
    -tarifHoraire: double
    +getType(): String
    +ajouterCertification(String certification): void
    +calculerRevenusHebdomadaires(): double
}

class Cours {
    -id: int
    -nom: String
    -description: String
    -prix: double
    -dateHeure: LocalDateTime
    -duree: int
    -capaciteMax: int
    -entraineur: Entraineur
    +estComplet(): boolean
    +obtenirPlacesDisponibles(): int
}

class Participation {
    -id: int
    -membre: Membre
    -cours: Cours
    -dateReservation: LocalDateTime
    -statut: StatutParticipation
    +confirmerParticipation(): void
    +annulerParticipation(): void
}

enum StatutParticipation {
    RESERVEE
    CONFIRMEE
    ANNULEE
    PRESENTE
}

class Machine {
    -type: String
    -marque: String
    -modele: String
    -anneeFabrication: int
    -nombreUtilisationsJour: int
    +calculerCoutMaintenance(): double
    +incrementerUtilisation(): void
}

class Accessoire {
    -categorie: String
    -taille: String
    -couleur: String
    -quantiteStock: int
    -quantiteMinimale: int
    +calculerCoutMaintenance(): double
    +verifierStock(): boolean
    +ajusterStock(int quantite): void
}

class Abonnement {
    -id: int
    -dateDebut: LocalDate
    -dateFin: LocalDate
    -type: TypeAbonnement
    -renouvellementAuto: boolean
    -prix: double
    -membre: Membre
    +estValide(): boolean
    +calculerDureeRestante(): int
    +renouveler(): void
}

class Notification {
    -id: int
    -message: String
    -dateCreation: LocalDateTime
    -lue: boolean
    -type: TypeNotification
    -destinataire: Membre
    +marquerCommeLue(): void
    +estExpire(): boolean
}

class Statistiques {
    -dateGeneration: LocalDateTime
    -nombreTotalMembres: int
    -nombreMembresActifs: int
    -nombreCoursTotal: int
    -revenuMensuel: double
    -tauxOccupation: double
    +estAJour(): boolean
}

' ===== SERVICES (Logique métier) =====
class MembreService {
    -membreRepository: IRepository<Membre>
    -notificationService: INotificationService
    +inscrireMembre(Personne personne): Membre
    +desactiverMembre(int membreId): void
    +obtenirMembresActifs(): List<Membre>
}

class CoursService {
    -coursRepository: IRepository<Cours>
    -participationRepository: IRepository<Participation>
    +creerCours(Cours cours): Cours
    +assignerEntraineur(int coursId, int entraineurId): void
    +obtenirCoursDisponibles(): List<Cours>
}

class EquipementService {
    -equipementRepository: IRepository<Equipement>
    +ajouterEquipement(Equipement equipement): void
    +planifierMaintenance(int equipementId): void
    +obtenirEquipementsDefaillants(): List<Equipement>
}

' ===== FACADE (Point d'entrée) =====
class GestionSalleSportFacade {
    -membreService: MembreService
    -coursService: CoursService
    -equipementService: EquipementService
    -reservationService: IReservationService
    -statisticsService: IStatisticsService
    +inscrireMembre(Personne personne): Membre
    +reserverCours(int membreId, int coursId): boolean
    +obtenirStatistiques(): Statistiques
}

' ===== RELATIONS D'HÉRITAGE =====
Personne <|-- Membre
Personne <|-- Entraineur
Equipement <|-- Machine
Equipement <|-- Accessoire

' ===== RELATIONS D'IMPLÉMENTATION =====
MembreService ..|> IRepository
CoursService ..|> IRepository
EquipementService ..|> IRepository

' ===== RELATIONS D'ASSOCIATION =====
Membre ||--o{ Abonnement
Membre ||--o{ Notification
Membre ||--o{ Participation
Entraineur ||--o{ Cours
Cours ||--o{ Participation
Equipement ||-- EtatEquipement
Membre ||-- TypeAbonnement
Notification ||-- TypeNotification
Participation ||-- StatutParticipation

' ===== COMPOSITION ET AGGREGATION =====
GestionSalleSportFacade *-- MembreService
GestionSalleSportFacade *-- CoursService
GestionSalleSportFacade *-- EquipementService
GestionSalleSportFacade o-- IReservationService
GestionSalleSportFacade o-- IStatisticsService

' ===== DÉPENDANCES =====
MembreService ..> INotificationService
CoursService ..> IReservationService

@enduml 