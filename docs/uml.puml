@startuml

' Style du diagramme
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
}

' Classes abstraites
abstract class Personne {
    -id: int
    -nom: String
    -prenom: String
    -email: String
    -telephone: String
    +getType(): String
}

abstract class Service {
    -id: int
    -nom: String
    -description: String
    -prix: double
    -actif: boolean
}

abstract class Equipement {
    -id: int
    -nom: String
    -description: String
    -etat: String
    -prix: double
}

' Interface
interface IGestionStock {
    +ajouterEquipement(Equipement equipement): void
    +supprimerEquipement(int id): void
    +modifierEquipement(Equipement equipement): void
    +afficherEquipements(): void
}

' Classes concrètes
class Membre {
    -dateInscription: LocalDate
    -typeAbonnement: String
    -actif: boolean
}

class Entraineur {
    -specialite: String
    -certifications: List<String>
    -coursEnseignes: List<Cours>
    +ajouterCertification(String): void
    +ajouterCours(Cours): void
}

class Cours {
    -dateHeure: LocalDateTime
    -duree: int
    -capaciteMax: int
    -participants: List<Membre>
    -entraineur: Entraineur
    +ajouterParticipant(Membre): boolean
    +retirerParticipant(Membre): boolean
}

class Machine {
    -type: String
    -marque: String
    -modele: String
    -anneeFabrication: int
}

class Accessoire {
    -categorie: String
    -taille: String
    -couleur: String
    -quantite: int
    +incrementerQuantite(int): void
    +decrementerQuantite(int): boolean
}

class Abonnement {
    -dateDebut: LocalDate
    -dateFin: LocalDate
    -type: String
    -renouvellementAuto: boolean
}

class Notification {
    -id: int
    -message: String
    -dateCreation: LocalDateTime
    -lue: boolean
    -type: String
    -destinataire: Membre
}

class Statistiques {
    -nombreTotalMembres: int
    -nombreMembresActifs: int
    -nombreCoursTotal: int
    -nombreCoursAujourdhui: int
    -equipementsParType: Map<String, Integer>
    -coursParType: Map<String, Integer>
    -revenuMensuel: double
    -evenementsRecents: List<String>
    +mettreAJourStatistiques(): void
    +ajouterEvenement(String): void
}

class GestionSalleSport {
    -membres: List<Membre>
    -entraineurs: List<Entraineur>
    -cours: List<Cours>
    -equipements: List<Equipement>
    -abonnements: List<Abonnement>
    -notifications: List<Notification>
    -statistiques: Statistiques
}

' Relations d'héritage
Personne <|-- Membre
Personne <|-- Entraineur
Service <|-- Cours
Equipement <|-- Machine
Equipement <|-- Accessoire

' Relations d'implémentation
GestionSalleSport ..|> IGestionStock

' Relations d'association
GestionSalleSport "1" *-- "0..*" Membre
GestionSalleSport "1" *-- "0..*" Entraineur
GestionSalleSport "1" *-- "0..*" Cours
GestionSalleSport "1" *-- "0..*" Equipement
GestionSalleSport "1" *-- "0..*" Abonnement
GestionSalleSport "1" *-- "0..*" Notification
GestionSalleSport "1" *-- "1" Statistiques

Cours "1" *-- "1" Entraineur
Cours "1" *-- "0..*" Membre
Notification "1" *-- "1" Membre

@enduml 