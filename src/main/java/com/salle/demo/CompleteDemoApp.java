package com.salle.demo;

import com.salle.config.DatabaseConfig;
import com.salle.service.*;
import com.salle.model.*;
import com.salle.repository.ParticipationRepository;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Application de d√©monstration compl√®te pour toutes les entit√©s
 * Tests d'int√©gration de toutes les fonctionnalit√©s du syst√®me
 */
public class CompleteDemoApp {
    
    public static void main(String[] args) {
        System.out.println("üèãÔ∏è‚Äç‚ôÇÔ∏è === D√âMONSTRATION COMPL√àTE DU SYST√àME === üèãÔ∏è‚Äç‚ôÄÔ∏è");
        System.out.println();
        
        try {
            // Test de la connexion √† la base de donn√©es
            System.out.println("üìä Test de connexion √† la base de donn√©es...");
            DatabaseConfig dbConfig = DatabaseConfig.getInstance();
            if (dbConfig.testConnection()) {
                System.out.println("‚úÖ Connexion √©tablie avec succ√®s !");
            } else {
                System.out.println("‚ùå √âchec de la connexion !");
                return;
            }
            System.out.println();
            
            // Cr√©ation des services
            MembreService membreService = new MembreService();
            EntraineurService entraineurService = new EntraineurService();
            CoursService coursService = new CoursService();
            ParticipationRepository participationRepo = new ParticipationRepository();
            
            // === 1. GESTION DES MEMBRES ===
            System.out.println("üë• === GESTION DES MEMBRES ===");
            try {
                // Cr√©ation de membres
                Membre membre1 = membreService.inscrireMembre(
                    "Durand", "Sophie", "sophie.durand@email.com", "0123456789", "MENSUEL"
                );
                Membre membre2 = membreService.inscrireMembre(
                    "Lefebvre", "Pierre", "pierre.lefebvre@email.com", "0987654321", "ANNUEL"
                );
                Membre membre3 = membreService.inscrireMembre(
                    "Garcia", "Ana", "ana.garcia@email.com", "0556677889", "TRIMESTRIEL"
                );
                
                System.out.println("‚úÖ 3 membres cr√©√©s avec succ√®s");
                
                // Statistiques membres
                long totalMembres = membreService.obtenirNombreTotalMembres();
                long membresActifs = membreService.obtenirNombreMembresActifs();
                System.out.println("üìä Total membres: " + totalMembres + " | Actifs: " + membresActifs);
                
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Certains membres existent peut-√™tre d√©j√†");
            }
            System.out.println();
            
            // === 2. GESTION DES ENTRA√éNEURS ===
            System.out.println("üë®‚Äçüè´ === GESTION DES ENTRA√éNEURS ===");
            try {
                // Cr√©ation d'entra√Æneurs
                Entraineur entraineur1 = entraineurService.inscrireEntraineur(
                    "Martin", "Jean", "jean.martin@email.com", "0111111111", "Musculation"
                );
                Entraineur entraineur2 = entraineurService.inscrireEntraineur(
                    "Bernard", "Claire", "claire.bernard@email.com", "0222222222", "Cardio"
                );
                Entraineur entraineur3 = entraineurService.inscrireEntraineur(
                    "Petit", "Marc", "marc.petit@email.com", "0333333333", "Yoga"
                );
                
                System.out.println("‚úÖ 3 entra√Æneurs cr√©√©s avec succ√®s");
                
                // Sp√©cialit√©s disponibles
                List<Entraineur> entraineursMusculation = entraineurService.obtenirEntraineursParSpecialite("Musculation");
                List<Entraineur> entraineursCardio = entraineurService.obtenirEntraineursParSpecialite("Cardio");
                System.out.println("üí™ Musculation: " + entraineursMusculation.size() + " entra√Æneur(s)");
                System.out.println("‚ù§Ô∏è Cardio: " + entraineursCardio.size() + " entra√Æneur(s)");
                
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Certains entra√Æneurs existent peut-√™tre d√©j√†");
            }
            System.out.println();
            
            // === 3. GESTION DES COURS ===
            System.out.println("üèÉ‚Äç‚ôÇÔ∏è === GESTION DES COURS ===");
            try {
                // R√©cup√©ration des entra√Æneurs pour assigner aux cours
                List<Entraineur> tousLesEntraineurs = entraineurService.obtenirTousLesEntraineurs();
                if (!tousLesEntraineurs.isEmpty()) {
                    Entraineur entraineur1 = tousLesEntraineurs.get(0);
                    Entraineur entraineur2 = tousLesEntraineurs.size() > 1 ? tousLesEntraineurs.get(1) : entraineur1;
                    
                    // Cr√©ation de cours
                    LocalDateTime maintenant = LocalDateTime.now();
                    
                    Cours cours1 = coursService.creerCours(
                        "Musculation D√©butant", 
                        "Cours de musculation pour d√©butants",
                        25.0,
                        maintenant.plusDays(1).withHour(10).withMinute(0),
                        60,
                        15,
                        entraineur1
                    );
                    
                    Cours cours2 = coursService.creerCours(
                        "Cardio Intense", 
                        "S√©ance de cardio haute intensit√©",
                        20.0,
                        maintenant.plusDays(2).withHour(18).withMinute(0),
                        45,
                        20,
                        entraineur2
                    );
                    
                    Cours cours3 = coursService.creerCours(
                        "Yoga Relaxation", 
                        "S√©ance de yoga pour la d√©tente",
                        15.0,
                        maintenant.plusDays(3).withHour(19).withMinute(0),
                        75,
                        12,
                        entraineur1
                    );
                    
                    System.out.println("‚úÖ 3 cours cr√©√©s avec succ√®s");
                    
                    // Statistiques cours
                    long totalCours = coursService.obtenirNombreTotalCours();
                    List<Cours> coursDisponibles = coursService.obtenirCoursDisponibles();
                    System.out.println("üìö Total cours: " + totalCours + " | Disponibles: " + coursDisponibles.size());
                    
                    // === 4. GESTION DES PARTICIPATIONS ===
                    System.out.println();
                    System.out.println("ü§ù === GESTION DES PARTICIPATIONS ===");
                    
                    // R√©cup√©ration des membres pour les inscriptions
                    List<Membre> tousLesMembres = membreService.obtenirTousLesMembres();
                    List<Cours> tousLesCours = coursService.obtenirTousLesCours();
                    
                    if (!tousLesMembres.isEmpty() && !tousLesCours.isEmpty()) {
                        // Inscription de membres aux cours
                        int participationsCreees = 0;
                        
                        for (int i = 0; i < Math.min(3, tousLesMembres.size()); i++) {
                            for (int j = 0; j < Math.min(2, tousLesCours.size()); j++) {
                                try {
                                    Membre membre = tousLesMembres.get(i);
                                    Cours cours = tousLesCours.get(j);
                                    
                                    // V√©rifier si la participation n'existe pas d√©j√†
                                    if (!participationRepo.existsByMembreIdAndCoursId(membre.getId(), cours.getId())) {
                                        Participation participation = new Participation(
                                            cours.getId(),
                                            membre.getId(),
                                            LocalDateTime.now()
                                        );
                                        participationRepo.create(participation);
                                        participationsCreees++;
                                    }
                                } catch (Exception e) {
                                    // Participation d√©j√† existante ou autre erreur
                                }
                            }
                        }
                        
                        System.out.println("‚úÖ " + participationsCreees + " participations cr√©√©es");
                        
                        // Statistiques des participations
                        if (!tousLesMembres.isEmpty()) {
                            Membre premierMembre = tousLesMembres.get(0);
                            List<Participation> participationsMembre = participationRepo.findByMembreId(premierMembre.getId());
                            System.out.println("üìä " + premierMembre.getNom() + " participe √† " + participationsMembre.size() + " cours");
                        }
                        
                        if (!tousLesCours.isEmpty()) {
                            Cours premierCours = tousLesCours.get(0);
                            long participantsCours = participationRepo.countByCoursId(premierCours.getId());
                            System.out.println("üìä Cours '" + premierCours.getNom() + "' : " + participantsCours + " participant(s)");
                        }
                    }
                    
                } else {
                    System.out.println("‚ö†Ô∏è Aucun entra√Æneur disponible pour cr√©er des cours");
                }
                
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Erreur lors de la cr√©ation des cours : " + e.getMessage());
            }
            System.out.println();
            
            // === 5. D√âMONSTRATION DES RECHERCHES AVANC√âES ===
            System.out.println("üîç === RECHERCHES AVANC√âES ===");
            
            // Cours disponibles aujourd'hui
            List<Cours> coursAujourdhui = coursService.obtenirCoursAujourdhui();
            System.out.println("üìÖ Cours aujourd'hui : " + coursAujourdhui.size());
            
            // Cours de la semaine
            List<Cours> coursSemaine = coursService.obtenirCoursSemaine();
            System.out.println("üìÖ Cours cette semaine : " + coursSemaine.size());
            
            // Entra√Æneurs disponibles
            List<Entraineur> entraineursDisponibles = entraineurService.obtenirEntraineursDisponibles();
            System.out.println("üë®‚Äçüè´ Entra√Æneurs disponibles : " + entraineursDisponibles.size());
            
            // Membres par type d'abonnement
            String[] typesAbonnement = {"MENSUEL", "TRIMESTRIEL", "ANNUEL"};
            for (String type : typesAbonnement) {
                List<Membre> membresParType = membreService.obtenirMembresParTypeAbonnement(type);
                System.out.println("üìä " + type + " : " + membresParType.size() + " membre(s)");
            }
            System.out.println();
            
            // === 6. D√âMONSTRATION DE RECHERCHES COMPLEXES ===
            System.out.println("üéØ === RECHERCHES COMPLEXES ===");
            
            // Participations r√©centes
            List<Membre> tousLesMembres = membreService.obtenirTousLesMembres();
            if (!tousLesMembres.isEmpty()) {
                Membre premierMembre = tousLesMembres.get(0);
                List<Participation> participationsRecentes = participationRepo.findParticipationsRecentesByMembre(
                    premierMembre.getId(), 30
                );
                System.out.println("üìà " + premierMembre.getNom() + " : " + participationsRecentes.size() + 
                                 " participations dans les 30 derniers jours");
            }
            
            // Cours dans une p√©riode
            LocalDateTime debut = LocalDateTime.now();
            LocalDateTime fin = debut.plusDays(7);
            List<Cours> coursProchaineSemaine = coursService.obtenirCoursParPeriode(debut, fin);
            System.out.println("üìÖ Cours prochaine semaine : " + coursProchaineSemaine.size());
            
            System.out.println();
            
            // === 7. STATISTIQUES GLOBALES ===
            System.out.println("üìä === STATISTIQUES GLOBALES ===");
            
            long totalMembresFinaux = membreService.obtenirNombreTotalMembres();
            long membresActifsFinaux = membreService.obtenirNombreMembresActifs();
            long totalEntraineurs = entraineurService.obtenirNombreTotalEntraineurs();
            long totalCoursFinaux = coursService.obtenirNombreTotalCours();
            long totalParticipations = participationRepo.count();
            
            System.out.println("üë• Total membres : " + totalMembresFinaux + " (actifs: " + membresActifsFinaux + ")");
            System.out.println("üë®‚Äçüè´ Total entra√Æneurs : " + totalEntraineurs);
            System.out.println("üèÉ‚Äç‚ôÇÔ∏è Total cours : " + totalCoursFinaux);
            System.out.println("ü§ù Total participations : " + totalParticipations);
            
            double tauxActivite = totalMembresFinaux > 0 ? (double) membresActifsFinaux / totalMembresFinaux * 100 : 0;
            System.out.println("üìà Taux d'activit√© : " + String.format("%.1f", tauxActivite) + "%");
            
            if (totalCoursFinaux > 0 && totalMembresFinaux > 0) {
                double moyenneParticipations = (double) totalParticipations / totalMembresFinaux;
                System.out.println("üìä Moyenne participations par membre : " + String.format("%.1f", moyenneParticipations));
            }
            
            System.out.println();
            System.out.println("üéâ === D√âMONSTRATION COMPL√àTE TERMIN√âE AVEC SUCC√àS ! ===");
            System.out.println("‚ú® Toutes les entit√©s ont √©t√© test√©es et int√©gr√©es correctement !");
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'ex√©cution de la d√©monstration : " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Fermeture propre de la connexion
            DatabaseConfig.getInstance().closeConnection();
            System.out.println("üîå Connexion ferm√©e proprement.");
        }
    }
} 