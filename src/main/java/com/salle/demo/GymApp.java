package com.salle.demo;

import com.salle.config.DatabaseConfig;
import com.salle.service.MembreService;
import com.salle.model.Membre;
import java.util.List;
import java.util.Optional;

/**
 * Application de d√©monstration pour tester l'int√©gration de la base de donn√©es
 * avec le syst√®me de gestion de salle de sport
 */
public class GymApp {
    
    public static void main(String[] args) {
        System.out.println("üèãÔ∏è‚Äç‚ôÇÔ∏è === SYST√àME DE GESTION SALLE DE SPORT === üèãÔ∏è‚Äç‚ôÄÔ∏è");
        System.out.println();
        
        try {
            // Test de la connexion √† la base de donn√©es
            System.out.println("üìä Test de connexion √† la base de donn√©es...");
            DatabaseConfig dbConfig = DatabaseConfig.getInstance();
            if (dbConfig.testConnection()) {
                System.out.println("‚úÖ Connexion √©tablie avec succ√®s !");
            } else {
                System.out.println("‚ùå √âchec de la connexion !");
                return;
            }
            System.out.println();
            
            // Cr√©ation du service des membres
            MembreService membreService = new MembreService();
            
            // === D√âMONSTRATION DES FONCTIONNALIT√âS ===
            
            // 1. Inscription de nouveaux membres
            System.out.println("üë• === INSCRIPTION DE NOUVEAUX MEMBRES ===");
            try {
                Membre membre1 = membreService.inscrireMembre(
                    "Dupont", "Jean", "jean.dupont@email.com", "0123456789", "MENSUEL"
                );
                System.out.println("‚úÖ Membre 1 inscrit : " + membre1);
                
                Membre membre2 = membreService.inscrireMembre(
                    "Martin", "Marie", "marie.martin@email.com", "0987654321", "ANNUEL"
                );
                System.out.println("‚úÖ Membre 2 inscrit : " + membre2);
                
                Membre membre3 = membreService.inscrireMembre(
                    "Bernard", "Paul", "paul.bernard@email.com", "0556677889", "TRIMESTRIEL"
                );
                System.out.println("‚úÖ Membre 3 inscrit : " + membre3);
                
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Certains membres existent peut-√™tre d√©j√† : " + e.getMessage());
            }
            System.out.println();
            
            // 2. Affichage de tous les membres
            System.out.println("üìã === LISTE DE TOUS LES MEMBRES ===");
            List<Membre> tousLesMembres = membreService.obtenirTousLesMembres();
            if (tousLesMembres.isEmpty()) {
                System.out.println("Aucun membre trouv√©.");
            } else {
                for (Membre membre : tousLesMembres) {
                    System.out.println("üë§ " + membre);
                }
            }
            System.out.println();
            
            // 3. Recherche par email
            System.out.println("üîç === RECHERCHE PAR EMAIL ===");
            String emailRecherche = "jean.dupont@email.com";
            Membre membreTrouve = membreService.trouverMembreParEmail(emailRecherche);
            if (membreTrouve != null) {
                System.out.println("‚úÖ Membre trouv√© pour " + emailRecherche + " : " + membreTrouve);
            } else {
                System.out.println("‚ùå Aucun membre trouv√© pour l'email : " + emailRecherche);
            }
            System.out.println();
            
            // 4. Filtrage par type d'abonnement
            System.out.println("üìä === MEMBRES PAR TYPE D'ABONNEMENT ===");
            String[] typesAbonnement = {"MENSUEL", "TRIMESTRIEL", "ANNUEL"};
            for (String type : typesAbonnement) {
                List<Membre> membresParType = membreService.obtenirMembresParTypeAbonnement(type);
                System.out.println("üìà " + type + " : " + membresParType.size() + " membre(s)");
                for (Membre membre : membresParType) {
                    System.out.println("   ‚Üí " + membre.getNom() + " " + membre.getPrenom());
                }
            }
            System.out.println();
            
            // 5. Statistiques
            System.out.println("üìà === STATISTIQUES ===");
            long totalMembres = membreService.obtenirNombreTotalMembres();
            long membresActifs = membreService.obtenirNombreMembresActifs();
            System.out.println("üë• Total des membres : " + totalMembres);
            System.out.println("‚úÖ Membres actifs : " + membresActifs);
            System.out.println("‚ùå Membres inactifs : " + (totalMembres - membresActifs));
            System.out.println();
            
            // 6. Test de d√©sactivation/r√©activation
            System.out.println("üîÑ === TEST D√âSACTIVATION/R√âACTIVATION ===");
            if (!tousLesMembres.isEmpty()) {
                Membre premierMembre = tousLesMembres.get(0);
                int membreId = premierMembre.getId();
                
                System.out.println("üì¥ D√©sactivation du membre : " + premierMembre.getNom());
                boolean desactiveSuccess = membreService.desactiverMembre(membreId);
                System.out.println("R√©sultat d√©sactivation : " + (desactiveSuccess ? "‚úÖ" : "‚ùå"));
                
                System.out.println("üì± R√©activation du membre : " + premierMembre.getNom());
                boolean reactiveSuccess = membreService.reactiverMembre(membreId);
                System.out.println("R√©sultat r√©activation : " + (reactiveSuccess ? "‚úÖ" : "‚ùå"));
            }
            System.out.println();
            
            // 7. Test de recherche par ID
            System.out.println("üîç === RECHERCHE PAR ID ===");
            if (!tousLesMembres.isEmpty()) {
                int idRecherche = tousLesMembres.get(0).getId();
                Optional<Membre> membreParId = membreService.trouverMembreParId(idRecherche);
                if (membreParId.isPresent()) {
                    System.out.println("‚úÖ Membre trouv√© par ID " + idRecherche + " : " + membreParId.get());
                } else {
                    System.out.println("‚ùå Aucun membre trouv√© pour l'ID : " + idRecherche);
                }
            }
            System.out.println();
            
            System.out.println("üéâ === D√âMONSTRATION TERMIN√âE AVEC SUCC√àS ! ===");
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'ex√©cution de la d√©monstration : " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Fermeture propre de la connexion
            DatabaseConfig.getInstance().closeConnection();
            System.out.println("üîå Connexion ferm√©e proprement.");
        }
    }
} 